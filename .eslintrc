{
    "parser": "@typescript-eslint/parser",
    "extends": [
        "standard",
        "plugin:@typescript-eslint/recommended",
        "plugin:react/recommended",
        "plugin:react/jsx-runtime",
        // prettier extensions go last
        "prettier",
        "eslint-config-prettier"
    ],
    "env": {
        "browser": true,
        "node": true,
        "es6": true
    },
    "parserOptions": {
        "ecmaVersion": 2020,
        "ecmaFeatures": {
            "legacyDecorators": true,
            "jsx": true
        },
        "sourceType": "module",
        "project": "./tsconfig.json"
    },    
    "plugins": [
        "@typescript-eslint",
        "standard",
        "react",
        "react-hooks"
    ],
    "settings": {
        "react": {
          "version": "detect"
        }
    },
    "rules": {
        "space-before-function-parent": 0,
        "react/prop-types": 0,
        "react/jsx-handler-names": 0,
        "react/jsx-fragments": 0,
        "react/no-unused-prop-types": 0,
        "import/export": 0,

    // TypeScript ------------------------------------------
    "@typescript-eslint/explicit-member-accessibility": 0,
    "@typescript-eslint/no-empty-function": [
        2,
        {
            "allow": [
            "arrowFunctions"
            ]
        }
        ],
    "@typescript-eslint/no-empty-interface": 0,
    "@typescript-eslint/no-use-before-define": 0, // Good for getting hooks and other functions out the way
    "@typescript-eslint/no-parameter-properties": 0, // Concise is nice
    "@typescript-eslint/explicit-function-return-type": [
        0,
        {
            "allowExpressions": false,
            "allowTypedFunctionExpressions": true
        }
        ],
    "@typescript-eslint/ban-types": [
        "error",
        {
            "types": {
            "Array": null,
            "Object": {
                "message": "Every type except null and undefined is assignable to Object. This is almost equivalent to using any. Use object instead.",
                "fixWith": "object"
            },
            "String": {
                "message": "Use string instead",
                "fixWith": "string"
            }
            }
        }
        ],
        "@typescript-eslint/no-explicit-any": 2, // Make this warning into an error
        "no-useless-constructor": 0, // We disable this to allow TS public/private property constructors
        "no-dupe-class-members": 0, // We disable this to allow TS overloading
        // General ---------------------------------------------
        "@typescript-eslint/ban-ts-ignore": 0, // we use ts-ignore a reasonable amount
        "@typescript-eslint/ban-ts-comment": 0, // We use ts-ignore a fair bit
        "@typescript-eslint/camelcase": 0, // Only for APIs!
        "camelcase": 0, // Only for APIs!
        "no-useless-escape": 0, // Too many false positives so disable
        "@typescript-eslint/no-unused-vars": [
            2,
            {
                // This is okay:
                // { removedProperty, ...desiredProperty } = obj
                // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unused-vars.md#ignorerestsiblings
                "ignoreRestSiblings": true,
                "argsIgnorePattern": "^_"
            }
            ],
        "@typescript-eslint/explicit-module-boundary-types": 0, // Disabled as it requires return types on the functions that React components are
        "no-use-before-define": 0, // We use implicit React imports
        "no-console": [
            2,
            {
                "allow": [
                "error"
                ]
            }
            ],       
        "no-warning-comments": [
            2,
            {
            "terms": [
                "todo",
                "fixme"
            ],
            "location": "anywhere"
            }
            ],
            "eqeqeq": [
                2,
                "always"
            ],
        "indent": ["error", 2, { "SwitchCase": 1 }],
        "import/order": [
            2,
            {
            "newlines-between": "never"
            }
        ],
        "import/no-unresolved": 0,
        "import/no-named-as-default": 0,
        "import/no-relative-parent-imports": 0
        },
        "overrides": [
            {
                "files": [
                "*.js"
                ],
                // JS rules go below as needed
                "rules": {
                // JS doesn"t always convert import to correct form
                "@typescript-eslint/no-var-requires": 0
                }
            },
            {
                "files": [
                "*.test.ts",
                "*.test.tsx"
                ],
                "rules": {
                // To make beforeEach blocks easier to work with:
                "@typescript-eslint/no-unused-vars": 0
                }
            }
        ]
}